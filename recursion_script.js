document.addEventListener('DOMContentLoaded', function() {
    const code = `function findKeyInArray(box) {
    if (typeof box === 'string') {
        if (box.toLowerCase().includes('key')) {
            return { 
                found: true, 
                message: \`üîë –ù–∞—à–ª–∏ –∫–ª—é—á –≤ \${box}!\`,
                box: box 
            };
        }
        return { found: false };
    }
    
    if (Array.isArray(box)) {
        for (const innerBox of box) {
            const result = findKeyInArray(innerBox);
            if (result.found) {
                return result;
            }
        }
    }
    
    return { found: false };
}`;

    document.getElementById('recursive-code').textContent = code;
});

function runRecursiveSearch() {
    const input = document.getElementById('recursive-input');
    const output = document.getElementById('recursive-output');
    const inputText = input.value.trim();

    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤—ã–≤–æ–¥
    output.innerHTML = '';
    output.className = 'output'; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–ª–∞—Å—Å—ã

    // –ï—Å–ª–∏ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ, –ø—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º
    if (!inputText) return;

    // –ü–∞—Ä—Å–∏–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤
    let arr;
    try {
        arr = JSON.parse(inputText);
        if (!Array.isArray(arr)) throw new Error('–í–≤–µ–¥–µ–Ω–æ –Ω–µ –º–∞—Å—Å–∏–≤');
    } catch (e) {
        output.innerHTML = '‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –º–∞—Å—Å–∏–≤–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: ["–ö–æ—Ä–æ–±–∫–∞ 1", ["–ö–æ—Ä–æ–±–∫–∞ 2 key"]]';
        output.classList.add('error');
        return;
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫
    const result = findKeyInArray(arr);

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥
    output.classList.add('show-result');
    if (result.found) {
        output.classList.add('success');
        output.innerHTML = result.message;
    } else {
        output.classList.add('error');
        output.innerHTML = '‚ùå –ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –º–∞—Å—Å–∏–≤–µ!';
    }
}