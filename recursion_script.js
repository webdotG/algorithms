document.addEventListener('DOMContentLoaded', function() {
    const code = `// –ü–æ–∏—Å–∫ –≤ –º–∞—Å—Å–∏–≤–µ
function findKeyInArray(box) {
    if (typeof box === 'string') {
        if (box.toLowerCase().includes('key')) {
            return { 
                found: true, 
                message: \`üîë –ù–∞—à–ª–∏ –∫–ª—é—á –≤ \${box}!\`,
                box: box 
            };
        }
        return { found: false };
    }
    
    if (Array.isArray(box)) {
        for (const innerBox of box) {
            const result = findKeyInArray(innerBox);
            if (result.found) {
                return result;
            }
        }
    }
    
    return { found: false };
}

// –ü–æ–∏—Å–∫ –≤ –æ–±—ä–µ–∫—Ç–µ
function findKeyInObject(box) {
    if (box.isKey) {
        return { 
            found: true, 
            message: \`üîë –ù–∞—à–ª–∏ –∫–ª—é—á –≤ \${box.name}!\`,
            box: box 
        };
    }
    
    for (const innerBox of box.innerBoxes) {
        const result = findKeyInObject(innerBox);
        if (result.found) {
            return result;
        }
    }
    
    return { found: false };
}`;

    document.getElementById('recursive-code').textContent = code;
    Prism.highlightAll(); // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ç–∏–ø–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    document.getElementById('structure-type').addEventListener('change', function() {
        const input = document.getElementById('recursive-input');
        if (this.value === 'array') {
            input.placeholder = '["–ö–æ—Ä–æ–±–∫–∞ 1", ["–ö–æ—Ä–æ–±–∫–∞ 2 key"]]';
        } else {
            input.placeholder = '{"name":"–ö–æ—Ä–æ–±–∫–∞ 1","isKey":false,"innerBoxes":[{"name":"–ö–æ—Ä–æ–±–∫–∞ 2","isKey":false,"innerBoxes":[{"name":"–ö–æ—Ä–æ–±–∫–∞ 3","isKey":true,"innerBoxes":[]}]}]}';
        }
    });
});

function runRecursiveSearch() {
    const input = document.getElementById('recursive-input');
    const output = document.getElementById('recursive-output');
    const structureType = document.getElementById('structure-type').value;
    const inputText = input.value.trim();

    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤—ã–≤–æ–¥
    output.innerHTML = '';
    output.className = 'output'; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–ª–∞—Å—Å—ã

    // –ï—Å–ª–∏ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ, –ø—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º
    if (!inputText) return;

    // –ü–∞—Ä—Å–∏–º –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    let data;
    try {
        data = JSON.parse(inputText);
    } catch (e) {
        output.innerHTML = '‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON';
        output.classList.add('error');
        return;
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    let result;
    if (structureType === 'array') {
        if (!Array.isArray(data)) {
            output.innerHTML = '‚ùå –û—à–∏–±–∫–∞: –æ–∂–∏–¥–∞–µ—Ç—Å—è –º–∞—Å—Å–∏–≤';
            output.classList.add('error');
            return;
        }
        result = findKeyInArray(data);
    } else {
        if (!data || typeof data !== 'object' || !('name' in data && 'isKey' in data && 'innerBoxes' in data)) {
            output.innerHTML = '‚ùå –û—à–∏–±–∫–∞: –æ–±—ä–µ–∫—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª—è name, isKey –∏ innerBoxes';
            output.classList.add('error');
            return;
        }
        result = findKeyInObject(data);
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥
    output.classList.add('show-result');
    if (result.found) {
        output.classList.add('success');
        output.innerHTML = result.message;
    } else {
        output.classList.add('error');
        output.innerHTML = '‚ùå –ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω!';
    }
}